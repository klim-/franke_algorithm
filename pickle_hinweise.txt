In [5]: pfile = open('big_matrix.pcl')
                                                                                                                                                                                                                                                                            
In [6]: pdict = pickle.load(pfile)
                                                                                                                                                                                                                                                                            
In [7]: P = pd                                                                                                                                                                                                                                                              
%pdb   %pdef  %pdoc  pdict                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                            
In [7]: P = pdict['P']
                                                                                                                                                                                                                                                                            
In [8]: P.shape
Out[8]: (2, 4)                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                            
In [9]: al                                                                                                                                                                                                                                                                  
%alias                 %alias_magic           al                     algebra.py             algebra.pyc            algorithmus_franke.py  all                                                                                                                               
                                                                                                                                                                                                                                                                            
In [9]: al.is                                                                                                                                                                                                                                                               
al.is_linearly_independent      al.is_regular_matrix            al.is_square_matrix             al.is_symbolically_unit_matrix  al.is_symbolically_zero_matrix  al.is_unit_matrix               al.is_zero_matrix                                                           
                                                                                                                                                                                                                                                                            
In [9]: al.is_zero_matrix(P*0)                                                                                                                                                                                                                                              
Out[9]: True                                                                                                                                                                                                                                                                
                                                                                                                                                                                                                                                                            
In [10]: al.is_zero_matrix(P)                                                                                                                                                                                                                                             
Out[10]: True                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                            
In [11]: P[-1].co
Out[11]: 820                                                                                                                                                                                                                                                                
                                                                                                                                                                                                                                                                            
In [12]: pp = P[-1]

In [13]: import symb
symb_tools                   symb_tools_experimental      symb_tools_experimental_old  symbol                       

In [13]: import symb_
symb_tools                   symb_tools_experimental      symb_tools_experimental_old  

In [13]: import symb_tools as st

In [14]: st.subs
st.subs_random_numbers  st.subs_same_symbs      

In [14]: st.subs_random_numbers(pp)
Out[14]: -1.33041842730411e-27

In [15]: st.subs_random_numbers(pp)
Out[15]: -4.28008776612920e-14

In [16]: st.subs_random_numbers(pp)
Out[16]: 2.28538883575716e-9

In [17]: st.subs_random_numbers(pp)
Out[17]: -2.91507542902926e-28

In [18]: st.subs_random_numbers(pp)
Out[18]: -3.56360565691184e-23

In [19]: st.subs_random_numbers(pp)
Out[19]: -6.91750383220056e-15

In [20]: st.subs_random_numbers(pp)
Out[20]: -1.56947476139441e-19


"""
Hier sieht man ganz klar das Problem: Der Wert schwankt zwischen 1e-9 und 1e-28
beim normalen subs_random_numbers werden nur Werte zwischen 0 und 1 eingesetzt.
wenn man die potenziert und miteinander multipliziert muss etwas sehr kleines rauskommen.

weil ich auch schon ähnliche Probleme hatte gibt es das Schlüsselwort prime (siehe unten).

da werden nur (zufällige) Primzahlen eingesetzt. Wie man sieht, kommen dabei große Zahlen raus.
Problematisch könnte das werden, wenn es bestimmte Grenzen für den Definitionsbereich gibt... aber als schnelle Lösung für das vorliegende Problem sehe ich das.

"""


In [21]: pp
Out[21]: (C1_1*C2_2 - C1_2*C2_1)**5*(C1_3*C2_4 - C1_4*C2_3)**7*(-(C1_1*C2_2 - C1_2*C2_1)**2*(C1_2*C2_3 - C1_3*C2_2)*(C1_3*C2_dot4 - C1_4*C2_dot3 + C1_dot3*C2_4 - C1_dot4*C2_3)*(B1_1*C1_3*C2_4**2 - B1_1*C1_4*C2_3*C2_4 - B1_3*C1_1*C2_4**2 + B1_3*C1_4*C2_1*C2_4 + B1_4*C1_1*C2_3*C2_4 - B1_4*C1_3*C2_1*C2_4 - B2_1*C1_3*C1_4*C2_4 + B2_1*C1_4**2*C2_3 + B2_3*C1_1*C1_4*C2_4 - B2_3*C1_4**2*C2_1 - B2_4*C1_1*C1_4*C2_3 + B2_4*C1_3*C1_4*C2_1 + 2*C1_1*C1_4*C2_3*C2_dot4 - 2*C1_1*C1_4*C2_4*C2_dot3 + 2*C1_1*C1_dot3*C2_4**2 - 2*C1_1*C1_dot4*C2_3*C2_4 - 2*C1_3*C1_4*C2_1*C2_dot4 + 2*C1_3*C1_4*C2_4*C2_dot1 - 2*C1_3*C1_dot1*C2_4**2 + 2*C1_3*C1_dot4*C2_1*C2_4 + 2*C1_4**2*C2_1*C2_dot3 - 2*C1_4**2*C2_3*C2_dot1 + 2*C1_4*C1_dot1*C2_3*C2_4 - 2*C1_4*C1_dot3*C2_1*C2_4) + (C1_1*C2_2 - C1_2*C2_1)**2*(C1_3*C2_4 - C1_4*C2_3)*(C1_2*C2_dot3 - C1_3*C2_dot2 + C1_dot2*C2_3 - C1_dot3*C2_2)*(B1_1*C1_3*C2_4**2 - B1_1*C1_4*C2_3*C2_4 - B1_3*C1_1*C2_4**2 + B1_3*C1_4*C2_1*C2_4 + B1_4*C1_1*C2_3*C2_4 - B1_4*C1_3*C2_1*C2_4 - B2_1*C1_3*C1_4*C2_4 + B2_1*C1_4**2*C2_3 + B2_3*C1_1*C1_4*C2_4 - B2_3*C1_4**2*C2_1 - B2_4*C1_1*C1_4*C2_3 + B2_4*C1_3*C1_4*C2_1 + 2*C1_1*C1_4*C2_3*C2_dot4 - 2*C1_1*C1_4*C2_4*C2_dot3 + 2*C1_1*C1_dot3*C2_4**2 - 2*C1_1*C1_dot4*C2_3*C2_4 - 2*C1_3*C1_4*C2_1*C2_dot4 + 2*C1_3*C1_4*C2_4*C2_dot1 - 2*C1_3*C1_dot1*C2_4**2 + 2*C1_3*C1_dot4*C2_1*C2_4 + 2*C1_4**2*C2_1*C2_dot3 - 2*C1_4**2*C2_3*C2_dot1 + 2*C1_4*C1_dot1*C2_3*C2_4 - 2*C1_4*C1_dot3*C2_1*C2_4) + (C1_1*C2_2 - C1_2*C2_1)*(-(C1_1*(C1_2*C2_3 - C1_3*C2_2) - C1_2*(C1_1*C2_3 - C1_3*C2_1))*(B2_2*C1_3*C2_4 - B2_2*C1_4*C2_3 - B2_3*C1_2*C2_4 + B2_3*C1_4*C2_2 + B2_4*C1_2*C2_3 - B2_4*C1_3*C2_2 - C1_2*C2_3*C2_dot4 + C1_2*C2_4*C2_dot3 + C1_3*C2_2*C2_dot4 - C1_3*C2_4*C2_dot2 - C1_4*C2_2*C2_dot3 + C1_4*C2_3*C2_dot2) + (C2_1*(C1_2*C2_3 - C1_3*C2_2) - C2_2*(C1_1*C2_3 - C1_3*C2_1))*(B1_2*C1_3*C2_4 - B1_2*C1_4*C2_3 - B1_3*C1_2*C2_4 + B1_3*C1_4*C2_2 + B1_4*C1_2*C2_3 - B1_4*C1_3*C2_2 + C1_2*C1_dot3*C2_4 - C1_2*C1_dot4*C2_3 - C1_3*C1_dot2*C2_4 + C1_3*C1_dot4*C2_2 + C1_4*C1_dot2*C2_3 - C1_4*C1_dot3*C2_2))*(B1_1*C1_3*C2_4**2 - B1_1*C1_4*C2_3*C2_4 - B1_3*C1_1*C2_4**2 + B1_3*C1_4*C2_1*C2_4 + B1_4*C1_1*C2_3*C2_4 - B1_4*C1_3*C2_1*C2_4 - B2_1*C1_3*C1_4*C2_4 + B2_1*C1_4**2*C2_3 + B2_3*C1_1*C1_4*C2_4 - B2_3*C1_4**2*C2_1 - B2_4*C1_1*C1_4*C2_3 + B2_4*C1_3*C1_4*C2_1 + 2*C1_1*C1_4*C2_3*C2_dot4 - 2*C1_1*C1_4*C2_4*C2_dot3 + 2*C1_1*C1_dot3*C2_4**2 - 2*C1_1*C1_dot4*C2_3*C2_4 - 2*C1_3*C1_4*C2_1*C2_dot4 + 2*C1_3*C1_4*C2_4*C2_dot1 - 2*C1_3*C1_dot1*C2_4**2 + 2*C1_3*C1_dot4*C2_1*C2_4 + 2*C1_4**2*C2_1*C2_dot3 - 2*C1_4**2*C2_3*C2_dot1 + 2*C1_4*C1_dot1*C2_3*C2_4 - 2*C1_4*C1_dot3*C2_1*C2_4) + ((C1_1*C2_2 - C1_2*C2_1)*(C1_1*C2_3 - C1_3*C2_1)*(C1_3*C2_dot4 - C1_4*C2_dot3 + C1_dot3*C2_4 - C1_dot4*C2_3) + (C1_1*C2_2 - C1_2*C2_1)*(C1_3*C2_4 - C1_4*C2_3)*(-C1_1*C2_dot3 + C1_3*C2_dot1 - C1_dot1*C2_3 + C1_dot3*C2_1) + (C1_1*(C1_2*C2_3 - C1_3*C2_2) - C1_2*(C1_1*C2_3 - C1_3*C2_1))*(B2_1*C1_3*C2_4 - B2_1*C1_4*C2_3 - B2_3*C1_1*C2_4 + B2_3*C1_4*C2_1 + B2_4*C1_1*C2_3 - B2_4*C1_3*C2_1 - C1_1*C2_3*C2_dot4 + C1_1*C2_4*C2_dot3 + C1_3*C2_1*C2_dot4 - C1_3*C2_4*C2_dot1 - C1_4*C2_1*C2_dot3 + C1_4*C2_3*C2_dot1) - (C2_1*(C1_2*C2_3 - C1_3*C2_2) - C2_2*(C1_1*C2_3 - C1_3*C2_1))*(B1_1*C1_3*C2_4 - B1_1*C1_4*C2_3 - B1_3*C1_1*C2_4 + B1_3*C1_4*C2_1 + B1_4*C1_1*C2_3 - B1_4*C1_3*C2_1 + C1_1*C1_dot3*C2_4 - C1_1*C1_dot4*C2_3 - C1_3*C1_dot1*C2_4 + C1_3*C1_dot4*C2_1 + C1_4*C1_dot1*C2_3 - C1_4*C1_dot3*C2_1))*((C1_1*C2_2 - C1_2*C2_1)*(C1_2*C2_4 - C1_4*C2_2)*(C1_3*C2_dot4 - C1_4*C2_dot3 + C1_dot3*C2_4 - C1_dot4*C2_3) + (C1_1*C2_2 - C1_2*C2_1)*(C1_3*C2_4 - C1_4*C2_3)*(-C1_2*C2_dot4 + C1_4*C2_dot2 - C1_dot2*C2_4 + C1_dot4*C2_2) + (C1_1*(C1_2*C2_4 - C1_4*C2_2) - C1_2*(C1_1*C2_4 - C1_4*C2_1))*(B2_2*C1_3*C2_4 - B2_2*C1_4*C2_3 - B2_3*C1_2*C2_4 + B2_3*C1_4*C2_2 + B2_4*C1_2*C2_3 - B2_4*C1_3*C2_2 - C1_2*C2_3*C2_dot4 + C1_2*C2_4*C2_dot3 + C1_3*C2_2*C2_dot4 - C1_3*C2_4*C2_dot2 - C1_4*C2_2*C2_dot3 + C1_4*C2_3*C2_dot2) - (C2_1*(C1_2*C2_4 - C1_4*C2_2) - C2_2*(C1_1*C2_4 - C1_4*C2_1))*(B1_2*C1_3*C2_4 - B1_2*C1_4*C2_3 - B1_3*C1_2*C2_4 + B1_3*C1_4*C2_2 + B1_4*C1_2*C2_3 - B1_4*C1_3*C2_2 + C1_2*C1_dot3*C2_4 - C1_2*C1_dot4*C2_3 - C1_3*C1_dot2*C2_4 + C1_3*C1_dot4*C2_2 + C1_4*C1_dot2*C2_3 - C1_4*C1_dot3*C2_2)))*(B1_1*C1_3*C2_4**2 - B1_1*C1_4*C2_3*C2_4 - B1_3*C1_1*C2_4**2 + B1_3*C1_4*C2_1*C2_4 + B1_4*C1_1*C2_3*C2_4 - B1_4*C1_3*C2_1*C2_4 - B2_1*C1_3*C1_4*C2_4 + B2_1*C1_4**2*C2_3 + B2_3*C1_1*C1_4*C2_4 - B2_3*C1_4**2*C2_1 - B2_4*C1_1*C1_4*C2_3 + B2_4*C1_3*C1_4*C2_1 + 2*C1_1*C1_4*C2_3*C2_dot4 - 2*C1_1*C1_4*C2_4*C2_dot3 + 2*C1_1*C1_dot3*C2_4**2 - 2*C1_1*C1_dot4*C2_3*C2_4 - 2*C1_3*C1_4*C2_1*C2_dot4 + 2*C1_3*C1_4*C2_4*C2_dot1 - 2*C1_3*C1_dot1*C2_4**2 + 2*C1_3*C1_dot4*C2_1*C2_4 + 2*C1_4**2*C2_1*C2_dot3 - 2*C1_4**2*C2_3*C2_dot1 + 2*C1_4*C1_dot1*C2_3*C2_4 - 2*C1_4*C1_dot3*C2_1*C2_4)**2

In [22]: st.subs_random_numbers(pp, prime=True)
Out[22]: 58006485076103170492928398361193681755587563076667612882365907638503101125937117343856755726090240





